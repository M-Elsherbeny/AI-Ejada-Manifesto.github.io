name: PR Checks and Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'requirements.txt'
      - '.github/workflows/**'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Validate MkDocs configuration
        run: |
          echo "🔍 Validating MkDocs configuration..."
          # Test if mkdocs.yml is valid by doing a dry run build
          mkdocs build --clean --quiet
          echo "✅ MkDocs configuration is valid"
      
      - name: Check for broken links
        run: |
          echo "🔗 Checking for broken links..."
          mkdocs build --strict
          echo "✅ No broken links found"
      
      - name: Validate markdown files
        run: |
          echo "📝 Validating markdown files..."
          # Check for common markdown issues
          find docs -name "*.md" -exec echo "Checking {}" \;
          
          # Check for missing alt text in images
          if grep -r "!\[.*\](" docs/ | grep -v "alt="; then
            echo "⚠️  Warning: Some images may be missing alt text"
          fi
          
          # Check for TODO/FIXME comments
          if grep -r "TODO\|FIXME" docs/; then
            echo "ℹ️  Found TODO/FIXME comments in documentation"
          fi
          
          echo "✅ Markdown validation completed"
      
      - name: Test local server
        run: |
          echo "🚀 Testing local server startup..."
          timeout 30s mkdocs serve --dev-addr=127.0.0.1:8000 || true
          echo "✅ Local server test completed"
      
      - name: Check file structure
        run: |
          echo "📁 Validating file structure..."
          
          # Check if required files exist
          if [ ! -f "mkdocs.yml" ]; then
            echo "❌ mkdocs.yml is missing"
            exit 1
          fi
          
          if [ ! -f "requirements.txt" ]; then
            echo "❌ requirements.txt is missing"
            exit 1
          fi
          
          if [ ! -f "docs/index.md" ]; then
            echo "❌ docs/index.md is missing"
            exit 1
          fi
          
          if [ ! -f "docs/CONTRIBUTING.md" ]; then
            echo "❌ docs/CONTRIBUTING.md is missing"
            exit 1
          fi
          
          echo "✅ File structure validation passed"
      
      - name: Check for deprecated configurations
        run: |
          echo "⚠️  Checking for deprecated configurations..."
          
          # Check for deprecated emoji configuration
          if grep -q "materialx.emoji.twemoji" mkdocs.yml; then
            echo "❌ Found deprecated emoji configuration in mkdocs.yml"
            echo "Please update to use: material.extensions.emoji.twemoji"
            exit 1
          fi
          
          # Check for deprecated extensions
          if grep -q "mdx_truly_sane_lists" mkdocs.yml; then
            echo "❌ Found deprecated extension 'mdx_truly_sane_lists'"
            echo "Please remove this extension from mkdocs.yml"
            exit 1
          fi
          
          echo "✅ No deprecated configurations found"
      
      - name: Generate build report
        run: |
          echo "📊 Generating build report..."
          
          # Count files
          DOC_COUNT=$(find docs -name "*.md" | wc -l)
          IMG_COUNT=$(find docs -name "*.png" -o -name "*.jpg" -o -name "*.svg" | wc -l)
          
          echo "## 📋 Build Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation files**: $DOC_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Image files**: $IMG_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Python version**: 3.11" >> $GITHUB_STEP_SUMMARY
          echo "- **MkDocs version**: $(mkdocs --version)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks passed successfully!" >> $GITHUB_STEP_SUMMARY
      
      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 📋 Documentation Validation Results')
            );
            
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const color = status === 'success' ? 'green' : 'red';
            
            const body = `## 📋 Documentation Validation Results ${emoji}
            
            **Status**: ${status.toUpperCase()}
            
            ${status === 'success' ? 
              '🎉 All documentation checks passed! This PR is ready for review.' : 
              '⚠️ Some documentation checks failed. Please review the errors above.'
            }
            
            ### Checks Performed:
            - ✅ MkDocs configuration validation
            - ✅ Broken link detection
            - ✅ Markdown file validation
            - ✅ File structure validation
            - ✅ Deprecated configuration detection
            - ✅ Local server test
            
            ${status === 'success' ? 
              'This PR can be safely merged to main.' : 
              'Please fix the issues before merging.'
            }`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
